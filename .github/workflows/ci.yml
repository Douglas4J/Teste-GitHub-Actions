# Nome do workflow que aparecer√° na aba "Actions" do GitHub
name: Java Teste CI

# Define em quais eventos esse pipeline ser√° acionado
on:
  # Quando houver um push na branch "main"
  push:
    branches: [ main ]
  # Quando houver uma pull request direcionada √† branch "main"
  pull_request:
    branches: [ main ]

# Define os jobs (tarefas) que ser√£o executados
jobs:
  build: # Nome do job (voc√™ pode mudar para algo como "compilar-java" se quiser)
    # Define que o job ser√° executado em um runner Linux (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Faz o checkout do c√≥digo-fonte no reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3
        # Essa a√ß√£o clona o c√≥digo do seu reposit√≥rio no runner (m√°quina do GitHub)

      # Etapa 2: Configura o Java 24 no ambiente do runner
      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'   # Temurin = build do OpenJDK mantido pela Eclipse Foundation
          java-version: '24'        # Vers√£o do Java (OpenJDK 24)

      # Etapa 3: Gera o .jar com Maven
      - name: Build e empacotar .jar com Maven
        run: mvn clean package
        # 'clean' apaga arquivos de build anteriores
        # 'package' compila e empacota em um arquivo .jar (sem rodar testes se n√£o existirem)

      - name: Notificar Teams via curl
        if: always()
        run: |
          MESSAGE=$(cat <<EOF
          {
            "text": "**üì£ Notifica√ß√£o CI/CD GitHub Actions**\n\n\
          üìÅ Reposit√≥rio: ${GITHUB_REPOSITORY}\n\
          üôã‚Äç‚ôÇÔ∏è Autor: ${GITHUB_ACTOR}\n\
          üìù Commit: ${COMMIT_MESSAGE}\n\
          üîÄ Branch: ${BRANCH_NAME}\n\
          üö¶ Status: ${STATUS}\n\
          üîó Ver execu√ß√£o: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          }
          EOF
          )
          
          curl -H 'Content-Type: application/json' \
            -d "$MESSAGE" \
            ${{ secrets.TEAMS_WEBHOOK_URL }}
          env:
            GITHUB_REPOSITORY: ${{ github.repository }}
            GITHUB_ACTOR: ${{ github.actor }}
            COMMIT_MESSAGE: ${{ github.event.head_commit.message || github.event.pull_request.title || 'Mensagem indispon√≠vel' }}
            BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
            STATUS: ${{ job.status }}
            GITHUB_RUN_ID: ${{ github.run_id }}
